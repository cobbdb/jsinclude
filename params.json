{"name":"JSInclude","tagline":"A Django 1.3+ template tag to keep JavaScript out of your templates.","body":"    $ pip install jsinclude\r\n\r\nExample of use:\r\n> ```HTML\r\n<!-- template.html -->\r\n{% load jsinclude %}\r\n{% with 31 as age %}\r\n    {% jsinclude widgets/profile.js \"name=Jane Doe\" age gender=female %}\r\n{% endwith %}\r\n```\r\n```JavaScript\r\n// profile.js\r\nconsole.log('My name is ' + $jsi.name);\r\nconsole.log(\"I'm a \" + $jsi.age + ' year old ' + $jsi.gender);\r\n```\r\n\r\nSyntax:\r\n\r\n    {% jsinclude <path_to_script> [{arg}] %}\r\n\r\n-----------\r\n\r\n[![Build Status](https://travis-ci.org/cobbdb/jsinclude.png?branch=master)](https://travis-ci.org/cobbdb/jsinclude) [![Coverage Status](https://coveralls.io/repos/cobbdb/jsinclude/badge.png)](https://coveralls.io/r/cobbdb/jsinclude) [![PyPI version](https://badge.fury.io/py/jsinclude.png)](http://badge.fury.io/py/jsinclude) [![Download Count](https://pypip.in/d/jsinclude/badge.png)](https://pypi.python.org/pypi/jsinclude)\r\n-----------\r\n\r\n## Django-tag API\r\nJSInclude accepts three types of tag arguments.\r\n\r\n#### &lt;template variable&gt;\r\nAny context variable can be directly provided as a tag argument.\r\nJSInclude will preserve the variable's name in the JavaScript $jsi object.\r\n\r\n    # context['color'] == 'red'\r\n    {% jsinclude shape.js color %}\r\n\r\n#### name=value\r\nStatic values that do not contain spaces can be set as a simple\r\nkey=value pair.\r\n\r\n    {% jsinclude shape.js type=square %}\r\n\r\n#### \"name=long value\"\r\nStatic values that contain spaces must be wrapped in quotes. Django 1.3\r\ndoes not support arbitrary arguments in template tags, so the entire\r\nkey=value pair must be wrapped in quotes.\r\n\r\n    {% jsinclude shape.js \"label=my red square\" %}\r\n\r\n## JavaScript API\r\nJSInclude exposes a single JavaScript object that contains all\r\ntag arguments. This object is scoped only to the included script,\r\nso it will not remain in scope after the script has executed and\r\ndoes not alter global namespace at any time. This scope containment\r\nmeans that setting variable values in global scope will require\r\nexplicitly calling into the ```window``` object.\r\n\r\n    window.myglobal = 1234; // Works as expected.\r\n    myotherglobal = 1234; // Scoped only to the included script.\r\n\r\n#### $jsi\r\nJSInclude exposes the ``$jsi`` object scoped only to the included\r\ntemplate.\r\n\r\n#### $jsi.&lt;name&gt;\r\nThe ``$jsi`` object contains any Django template variables preserving\r\noriginal naming. Static data can be loaded into the ``$jsi`` object by\r\nthe ``name=value`` or ``\"name=long value\"`` tag argument conventions.\r\n\r\n## Configuration\r\n\r\n    # settings.py\r\n    JSINCLUDE_STATIC_PATH = 'required/path/to/static/files'\r\n    JSINCLUDE_WRAP_PATH = 'optional/path/to/custom.template'\r\n    # Built-in TEMPLATE_DEBUG will enable/disable minification.\r\n    TEMPLATE_DEBUG = True\r\n\r\n## Dependencies\r\n* [rjsmin](http://opensource.perlig.de/rjsmin/doc-1.0/index.html)\r\n\r\n------------------------\r\n\r\n* License: MIT\r\n* Dan Cobb <cobbdb@gmail.com>\r\n* Derek Anderson <dmanderson@live.com>\r\n\r\n------------------------\r\n\r\n## Change Log\r\n\r\n#### 1.2.0\r\n\r\n* Tag errors fail silently now. Error messages are returned describing what went wrong - formatted as an html comment. Find errors by searching the page's source for 'JSInclude Error'.\r\n* JavaScript Number and Boolean types are now supported. Tag arguments like ```branch=true``` will now appear in ```$jsi.branch``` as a Boolean instead of a String. Note that Python's ```True``` and ```False``` will appear in the ```$jsi``` object as strings because JavaScript uses lower-case Boolean values.","google":"UA-50240363-2","note":"Don't delete this file! It's used internally to help with page regeneration."}